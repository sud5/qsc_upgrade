diff a/outputrenderers.php b/outputrenderers.php	(rejected hunks)
@@ -1981,12 +2017,16 @@ class core_renderer extends renderer_base {
     * @param single_button|moodle_url|string $cancel The single_button component representing the Cancel answer. Can also be a moodle_url or string URL
     * @return string HTML fragment
     */
-    public function confirm($message, $continue, $cancel) {
+    public function confirm($message, $continue, $cancel, $flag=0) {
         if ($continue instanceof single_button) {
             // ok
             $continue->primary = true;
         } else if (is_string($continue)) {
-            $continue = new single_button(new moodle_url($continue), get_string('continue'), 'post', true);
+            if ($flag == 0) {
+                $continue = new single_button(new moodle_url($continue), get_string('continue'), 'post', true);
+            } else {
+                $continue = new single_button(new moodle_url($continue), get_string('continue_custom'), 'post', true);
+            }
         } else if ($continue instanceof moodle_url) {
             $continue = new single_button($continue, get_string('continue'), 'post', true);
         } else {
@@ -1996,7 +2036,10 @@ class core_renderer extends renderer_base {
         if ($cancel instanceof single_button) {
             // ok
         } else if (is_string($cancel)) {
-            $cancel = new single_button(new moodle_url($cancel), get_string('cancel'), 'get');
+		if($flag == 0)
+	        	$cancel = new single_button(new moodle_url($cancel), get_string('cancel'), 'get');
+		else
+			$cancel = new single_button(new moodle_url($cancel), get_string('cancel_custom'), 'get');
         } else if ($cancel instanceof moodle_url) {
             $cancel = new single_button($cancel, get_string('cancel'), 'get');
         } else {
@@ -3322,37 +3365,66 @@ EOD;
         $loginpage = $this->is_login_page();
         $loginurl = get_login_url();
         // If not logged in, show the typical not-logged-in string.
+
+
+//Start - updated for QSCID-SSO
+//         if (!isloggedin()) {
+//             $returnstr = get_string('loggedinnot', 'moodle');
+//             if (!$loginpage) {
+//                 $returnstr .= " (<a href=\"$loginurl\">" . get_string('login') . '</a>)';
+//             }
+//             return html_writer::div(
+//                 html_writer::span(
+//                     $returnstr,
+//                     'login'
+//                 ),
+//                 $usermenuclasses
+//             );
+
+//         }
+
+//         // If logged in as a guest user, show a string to that effect.
+//         if (isguestuser()) {
+//             $returnstr = get_string('loggedinasguest');
+//             if (!$loginpage && $withlinks) {
+// $returnstr .= '<ul class="nav user-pro">
+// <a class="newreg" href="https://sso-01.qsc.com/qscaudio_sso/page/signup" title="Register">Register</a>
+// <a href="'.$loginurl.'"> Log in</a>
+// </ul>';
+// //                $returnstr .= " <a href=\"$loginurl\">".get_string('login').'</a>';
+//             }
+
+//             return html_writer::div(
+//                 html_writer::span(
+//                     $returnstr,
+//                     'login'
+//                 ),
+//                 $usermenuclasses
+//             );
+//         }
+
         if (!isloggedin()) {
             $returnstr = get_string('loggedinnot', 'moodle');
             if (!$loginpage) {
-                $returnstr .= " (<a href=\"$loginurl\">" . get_string('login') . '</a>)';
+                require_once($CFG->dirroot . '/auth/googleoauth2/lib.php'); 
+                auth_googleoauth2_display_buttons();
             }
-            return html_writer::div(
-                html_writer::span(
-                    $returnstr,
-                    'login'
-                ),
-                $usermenuclasses
-            );
-
+           return;
         }
 
         // If logged in as a guest user, show a string to that effect.
         if (isguestuser()) {
             $returnstr = get_string('loggedinasguest');
             if (!$loginpage && $withlinks) {
-                $returnstr .= " (<a href=\"$loginurl\">".get_string('login').'</a>)';
+                
+                require_once($CFG->dirroot . '/auth/googleoauth2/lib.php'); 
+                auth_googleoauth2_display_buttons();
             }
-
-            return html_writer::div(
-                html_writer::span(
-                    $returnstr,
-                    'login'
-                ),
-                $usermenuclasses
-            );
+            return;
         }
 
+        //end -updated for QSCID-SSO
+
         // Get some navigation opts.
         $opts = user_get_user_navigation_info($user, $this->page);
 
@@ -3406,91 +3478,6 @@ EOD;
                 'meta mnet mnet-' . $mnet
             );
         }
-
-        $returnstr .= html_writer::span(
-            html_writer::span($usertextcontents, 'usertext mr-1') .
-            html_writer::span($avatarcontents, $avatarclasses),
-            'userbutton'
-        );
-
-        // Create a divider (well, a filler).
-        $divider = new action_menu_filler();
-        $divider->primary = false;
-
-        $am = new action_menu();
-        $am->set_menu_trigger(
-            $returnstr
-        );
-        $am->set_action_label(get_string('usermenu'));
-        $am->set_alignment(action_menu::TR, action_menu::BR);
-        $am->set_nowrap_on_items();
-        if ($withlinks) {
-            $navitemcount = count($opts->navitems);
-            $idx = 0;
-            foreach ($opts->navitems as $key => $value) {
-
-                switch ($value->itemtype) {
-                    case 'divider':
-                        // If the nav item is a divider, add one and skip link processing.
-                        $am->add($divider);
-                        break;
-
-                    case 'invalid':
-                        // Silently skip invalid entries (should we post a notification?).
-                        break;
-
-                    case 'link':
-                        // Process this as a link item.
-                        $pix = null;
-                        if (isset($value->pix) && !empty($value->pix)) {
-                            $pix = new pix_icon($value->pix, '', null, array('class' => 'iconsmall'));
-                        } else if (isset($value->imgsrc) && !empty($value->imgsrc)) {
-                            $value->title = html_writer::img(
-                                $value->imgsrc,
-                                $value->title,
-                                array('class' => 'iconsmall')
-                            ) . $value->title;
-                        }
-
-                        $al = new action_menu_link_secondary(
-                            $value->url,
-                            $pix,
-                            $value->title,
-                            array('class' => 'icon')
-                        );
-                        if (!empty($value->titleidentifier)) {
-                            $al->attributes['data-title'] = $value->titleidentifier;
-                        }
-                        $am->add($al);
-                        break;
-                }
-
-                $idx++;
-
-                // Add dividers after the first item and before the last item.
-                if ($idx == 1 || $idx == $navitemcount - 1) {
-                    $am->add($divider);
-                }
-            }
-        }
-
-        return html_writer::div(
-            $this->render($am),
-            $usermenuclasses
-        );
-    }
-
-    /**
-     * Secure layout login info.
-     *
-     * @return string
-     */
-    public function secure_layout_login_info() {
-        if (get_config('core', 'logininfoinsecurelayout')) {
-            return $this->login_info(false);
-        } else {
-            return '';
-        }
     }
 
     /**
@@ -4338,6 +4330,30 @@ EOD;
      * @return string HTML to display the main header.
      */
     public function full_header() {
+        global $USER, $DB;
+        $html = html_writer::start_tag('header', array('id' => 'page-header', 'class' => 'clearfix'));
+        $html .= $this->context_header();
+        $html .= html_writer::start_div('clearfix', array('id' => 'page-navbar'));
+        $isadmin = is_siteadmin($USER);
+
+        $sqlRole = "SELECT id FROM {role} WHERE shortname='grader'";
+        $rsRole = $DB->get_record_sql($sqlRole);
+
+        $sqlRoleAssignment = "SELECT contextid FROM {role_assignments} where userid=" . $USER->id . " AND roleid=" . $rsRole->id;
+        $rsRoleAssignment = $DB->get_record_sql($sqlRoleAssignment);
+
+        $flag_breacrumb_instructor_role = $_SESSION['instructorrole_breadcrumb_flag'];
+        if ($flag_breacrumb_instructor_role == 1 || $isadmin || !empty($rsRoleAssignment) || $USER->usertype == 'mainadmin' || $USER->usertype == 'graderasadmin') {
+            $html .= html_writer::tag('nav', $this->navbar(), array('class' => 'breadcrumb-nav'));
+            $html .= html_writer::div($this->page_heading_button(), 'breadcrumb-button');
+        }        
+        $html .= html_writer::end_div();
+        $html .= html_writer::tag('div', $this->course_header(), array('id' => 'course-header'));
+        $html .= html_writer::end_tag('header');
+        return $html;
+    }
+    /*public function full_header() {//moodle 3.8_fresh version
+        global $PAGE;
 
         if ($this->page->include_region_main_settings_in_header_actions() &&
                 !$this->page->blocks->is_block_present('settings')) {
@@ -5335,7 +5351,7 @@ class core_renderer_maintenance extends core_renderer {
      * @param single_button|moodle_url|string $cancel The single_button component representing the Cancel answer.
      * @return string HTML fragment
      */
-    public function confirm($message, $continue, $cancel) {
+    public function confirm($message, $continue, $cancel,$flag=0) {
         // We need plain styling of confirm boxes on upgrade because we don't know which stylesheet we have (it could be
         // from any previous version of Moodle).
         if ($continue instanceof single_button) {
